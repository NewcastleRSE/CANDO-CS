/* ###################################################################
**     Filename    : Events.c
**     Project     : RCS_Box_2.0
**     Processor   : MK22FN512VDC12
**     Component   : Events
**     Version     : Driver 01.00
**     Compiler    : GNU C Compiler
**     Date/Time   : 2020-01-27, 16:05, # CodeGen: 0
**     Abstract    :
**         This is user's event module.
**         Put your event handler code here.
**     Contents    :
**         Cpu_OnNMI - void Cpu_OnNMI(void);
**
** ###################################################################*/
/*!
** @file Events.c
** @version 01.00
** @brief
**         This is user's event module.
**         Put your event handler code here.
*/         
/*!
**  @addtogroup Events_module Events module documentation
**  @{
*/         
/* MODULE Events */

#include "Cpu.h"
#include "Events.h"
#include "Init_Config.h"
#include "PDD_Includes.h"
#include "Algorithm.h"

#ifdef __cplusplus
extern "C" {
#endif 

unsigned char algorithm = ORIGINAL;
unsigned int rec_reg = 0;
unsigned int conv_reg[KERNEL_SIZE] = {0};
unsigned short stim_reg = 0;

float taps[KERNELS][KERNEL_SIZE] = {0};
unsigned char taps_index = 8;
unsigned short index = 0;

float fai = 0.0f;
float alpha = 1.25f;
unsigned short threshold = 0*10;
unsigned short phase = 0;
unsigned short f = 10;
unsigned short offset = 0;

/* User includes (#include below this line is not maintained by Processor Expert) */

/*
** ===================================================================
**     Event       :  Cpu_OnNMI (module Events)
**
**     Component   :  Cpu [MK22FN512DC12]
*/
/*!
**     @brief
**         This event is called when the Non maskable interrupt had
**         occurred. This event is automatically enabled when the [NMI
**         interrupt] property is set to 'Enabled'.
*/
/* ===================================================================*/
void Cpu_OnNMI(void)
{
  /* Write your code here ... */
}

float convIntFloat(unsigned int i)
{
	float f;

	f = i/255.0f * 0.255f;

	f -= 0.127f;

	return f;
}

unsigned int convFloatInt(float f)
{
	unsigned int i;

	i = f/0.255f*255;

	return i;
}

void init_kernel(void)
{
	float total = 0.0f;

	for(taps_index = 0; taps_index < KERNELS; taps_index++)
	{
		fai = taps_index*45.0f/180.0f;
		fai = fai*3.14;

		total = 0.0f;

		for(index = 0; index < KERNEL_SIZE; index++)
		{
			taps[taps_index][index] = exp(-alpha*f*(0.002*index))*cos(2*3.14*f*index*0.002-fai);
			total += taps[taps_index][index];
		}

		total = total / 120.0f;

		for(index = 0; index < KERNEL_SIZE; index++)
		{
			taps[taps_index][index] -= total;
		}
	}
}

/*
** ===================================================================
**     Event       :  FC1_PH_OnInterrupt (module Events)
**
**     Component   :  FC1_PH [FreeCntr_LDD]
*/
/*!
**     @brief
**         This event is called when a compare matches the counter
**         value (if compare or reload is selected as a interrupt
**         source) or a counter overflows (for free-running devices).
**         Component and OnInterrupt event must be enabled. See
**         [SetEventMask] and [GetEventMask] methods. This event is
**         available only if a [Interrupt service/event] is enabled.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. The pointer passed as
**                           the parameter of Init method.
*/
/* ===================================================================*/
void FC1_PH_OnInterrupt(LDD_TUserData *UserDataPtr)
{
	unsigned int i = 0, j = 0;
	float rconv = 0;                                    // FIR output
	unsigned char scale = 0;

	AD1_Measure(TRUE);                                  //  Enable ADC
	AD1_GetValue8(&rec_reg);                               //  Running ADC

	rec_reg = rec_reg - offset;

	conv_reg[KERNEL_SIZE - 1] = rec_reg;

	for(j = 0; j < KERNEL_SIZE; j++)                    		// * the P-index value decides filter taps
	{
		rconv = taps[0][j] * convIntFloat(conv_reg[KERNEL_SIZE - 1 - j]) + rconv;
	}

	stim_reg = convFloatInt(rconv) * scale;               // Outputs scaling to fit DAC

	if(stim_reg > threshold)                          // Set intensity process
	{
		if (algorithm == SET_INTENSITY)
			stim_reg = scale * 400;                         // Set output as the maximum value

		if (stim_reg >= 4000)
		{
			stim_reg = 4000;
		}
	}
	else
	{
		stim_reg = 0;
	}

	for(i = 0; i < (KERNEL_SIZE - 1); i++)
	{
		conv_reg[i] = conv_reg[i + 1];
	}

	DA1_SetValue(&stim_reg);
}

/*
** ===================================================================
**     Event       :  AS1_OnError (module Events)
**
**     Component   :  AS1 [AsynchroSerial]
**     Description :
**         This event is called when a channel error (not the error
**         returned by a given method) occurs. The errors can be read
**         using <GetError> method.
**         The event is available only when the <Interrupt
**         service/event> property is enabled.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void AS1_OnError(void)
{
  /* Write your code here ... */
}

/*
** ===================================================================
**     Event       :  AS1_OnRxChar (module Events)
**
**     Component   :  AS1 [AsynchroSerial]
**     Description :
**         This event is called after a correct character is received.
**         The event is available only when the <Interrupt
**         service/event> property is enabled and either the <Receiver>
**         property is enabled or the <SCI output mode> property (if
**         supported) is set to Single-wire mode.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void AS1_OnRxChar(void)
{
  /* Write your code here ... */
}

/*
** ===================================================================
**     Event       :  AS1_OnTxChar (module Events)
**
**     Component   :  AS1 [AsynchroSerial]
**     Description :
**         This event is called after a character is transmitted.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void AS1_OnTxChar(void)
{
  /* Write your code here ... */
}

/*
** ===================================================================
**     Event       :  AS1_OnFullRxBuf (module Events)
**
**     Component   :  AS1 [AsynchroSerial]
**     Description :
**         This event is called when the input buffer is full;
**         i.e. after reception of the last character 
**         that was successfully placed into input buffer.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void AS1_OnFullRxBuf(void)
{

}

/*
** ===================================================================
**     Event       :  AS1_OnFreeTxBuf (module Events)
**
**     Component   :  AS1 [AsynchroSerial]
**     Description :
**         This event is called after the last character in output
**         buffer is transmitted.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void AS1_OnFreeTxBuf(void)
{
  /* Write your code here ... */
}

/*
** ===================================================================
**     Event       :  AS1_OnTxComplete (module Events)
**
**     Component   :  AS1 [AsynchroSerial]
**     Description :
**         This event indicates that the transmitter is finished
**         transmitting all data, preamble, and break characters and is
**         idle. It can be used to determine when it is safe to switch
**         a line driver (e.g. in RS-485 applications).
**         The event is available only when both <Interrupt
**         service/event> and <Transmitter> properties are enabled.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void AS1_OnTxComplete(void)
{
  /* Write your code here ... */
}

/* END Events */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
