/* ###################################################################
**     Filename    : Events.c
**     Project     : RCS_Box_2.0
**     Processor   : MK22FN512VDC12
**     Component   : Events
**     Version     : Driver 01.00
**     Compiler    : GNU C Compiler
**     Date/Time   : 2020-01-27, 16:05, # CodeGen: 0
**     Abstract    :
**         This is user's event module.
**         Put your event handler code here.
**     Contents    :
**         Cpu_OnNMI - void Cpu_OnNMI(void);
**
** ###################################################################*/
/*!
** @file Events.c
** @version 01.00
** @brief
**         This is user's event module.
**         Put your event handler code here.
*/         
/*!
**  @addtogroup Events_module Events module documentation
**  @{
*/         
/* MODULE Events */

#include "Cpu.h"
#include "Events.h"
#include "Init_Config.h"
#include "PDD_Includes.h"
#include "Algorithm.h"

#ifdef __cplusplus
extern "C" {
#endif 

unsigned char algorithm = SET_INTENSITY;
unsigned int rec_reg = 0;
unsigned int * rec_reg_ptr = &rec_reg;
unsigned int conv_reg[KERNEL_SIZE] = {0};
unsigned short stim_reg = 0;

float taps[KERNELS][KERNEL_SIZE] = {0};
unsigned char taps_index = 8;
unsigned short index = 0;

float fai = 0.0f;
float alpha = 1.25f;
unsigned short threshold = 0*10;
unsigned short phase = 0;
unsigned short f = 10;
unsigned short offset = 0;

/* User includes (#include below this line is not maintained by Processor Expert) */

/*
** ===================================================================
**     Event       :  Cpu_OnNMI (module Events)
**
**     Component   :  Cpu [MK22FN512DC12]
*/
/*!
**     @brief
**         This event is called when the Non maskable interrupt had
**         occurred. This event is automatically enabled when the [NMI
**         interrupt] property is set to 'Enabled'.
*/
/* ===================================================================*/
void Cpu_OnNMI(void)
{
  /* Write your code here ... */
}

/*
** ===================================================================
**     Event       :  FC1_PH_OnInterrupt (module Events)
**
**     Component   :  FC1_PH [FreeCntr_LDD]
*/
/*!
**     @brief
**         This event is called when a compare matches the counter
**         value (if compare or reload is selected as a interrupt
**         source) or a counter overflows (for free-running devices).
**         Component and OnInterrupt event must be enabled. See
**         [SetEventMask] and [GetEventMask] methods. This event is
**         available only if a [Interrupt service/event] is enabled.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. The pointer passed as
**                           the parameter of Init method.
*/
/* ===================================================================*/
void FC1_PH_OnInterrupt(LDD_TUserData *UserDataPtr)
{
	unsigned int i = 0, j = 0;
	float rconv = 0;                                    // FIR output
	unsigned char scale = 1;

	AD1_Measure(TRUE);                                  //  Enable ADC
	AD1_GetValue8(&rec_reg);                            //  Running ADC

	rec_reg = rec_reg - offset;

	conv_reg[KERNEL_SIZE - 1] = rec_reg;

	for(j = 0; j < KERNEL_SIZE; j++)                    // * the P-index value decides filter taps
	{
		rconv = taps[0][j] * convIntFloat(conv_reg[KERNEL_SIZE - 1 - j]) + rconv;
	}

	stim_reg = convFloatInt(rconv) * scale;             // Outputs scaling to fit DAC

	if(stim_reg > threshold)                          	// Set intensity process
	{
		if (algorithm == SET_INTENSITY)
			stim_reg = scale * 400;                     // Set output as the maximum value

		if (stim_reg >= 4000)
		{
			stim_reg = 4000;
		}
	}
	else
	{
		stim_reg = 0;
	}

	for(i = 0; i < (KERNEL_SIZE - 1); i++)
	{
		conv_reg[i] = conv_reg[i + 1];
	}

	DA1_SetValue(&stim_reg);
}

/* END Events */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
