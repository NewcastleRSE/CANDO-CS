/* ###################################################################
**     Filename    : main.c
**     Project     : RCSV1.2
**     Processor   : MK22FN512VLH12
**     Version     : Driver 01.01
**     Compiler    : GNU C Compiler
**     Date/Time   : 2017-09-14, 12:55, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file main.c
** @version 01.01
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup main_module main module documentation
**  @{
*/         
/* MODULE main */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "Pins1.h"
#include "AD1.h"
#include "AdcLdd1.h"
#include "AS1.h"
#include "ASerialLdd1.h"
#include "FC1_PH.h"
#include "TU1.h"
#include "DA1.h"
#include "DacLdd1.h"
#include "Bit1.h"
#include "BitIoLdd1.h"
#include "WAIT1.h"
#include "MCUC1.h"

/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PDD_Includes.h"
#include "Init_Config.h"
#include "arm_math.h"
#include "benchmark1.h"
#include "benchmark2.h"
#include<time.h>
/* User includes (#include below this line is not maintained by Processor Expert) */
unsigned int reg1 = 0;                                           //ADC register
unsigned int reg2[512] ={0};
/***************ADC firmware*****************************/


/***************DAC firmware*****************************/
unsigned short reg4 = 0;;
/***************DAC firmware*****************************/


/***************UART firmware*****************************/
uint8 rec_uart[13] = {0};                                    // UART receive buffer
unsigned int sent = 0;                                      // UART send indicator
uint8 UART_flag = 1;
uint8 ttl_selec = 0;
uint8 send_uart[4] ={0};
unsigned int ttl_on = 0;
unsigned int ttl_off = 0;
uint8 ttl_enable =0;
//uint8 reg4[WINDOW_SIZE] = {0};                            // UART float-to-uint8 register
/***************UART firmware*****************************/


/**************Timer************************************/
unsigned int time1 = 0;
LDD_TDeviceData *MyFC1Ptr;
unsigned int ttl_counter = 0;
unsigned short p_counter = 0;
/**************Timer************************************/


/**************FIR kernel*******************************/
unsigned int index = 0;                                  //ADC internal index
uint8 f = 10;
float alpha = 1.25;
float kel[512] = {0};
uint8 config = 1;
float fai =0;
uint8 scale = 1;
unsigned int threshold = 0;
uint8 offset = 0;
uint8 p_index = 0 ;
uint8 set_inten =0;
/**************FIR kernel*******************************/


/**************Threshold algorithm*********************/
uint8 selec = 0;
uint8 thres = 0;
uint8 intensity  = 0;
uint8 manual_on = 0;
uint8 manual_off = 0;
 unsigned f_counter =0;
 unsigned n_index = 0;
 unsigned int ff =0;
/**************Threshold algorithm*********************/


 unsigned int ll_window_size = 0;
 unsigned int ll_threshold= 0;
 unsigned int ll_scale = 0;

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
  /* Write your local variable definition here */

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
	PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */
  MyFC1Ptr = FC1_PH_Init((LDD_TUserData *)NULL);          /* Initialize frequency interrupt */
  FC1_PH_Disable(MyFC1Ptr);                               /* Disable the FC                 */
  ;//null statement                                       /* System initialization          */
  FC1_PH_Enable(MyFC1Ptr);                                /* Enable the FC                  */
  srand(time(0));
  for(;;) {
	  //Bit1_SetVal();
  }
  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
/*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/
}
/* END main */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
